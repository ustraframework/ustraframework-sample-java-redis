
apply plugin: 'org.springframework.boot'
apply plugin: 'io.spring.dependency-management'
apply plugin: 'java'
apply plugin: 'eclipse'

bootJar.enabled = true
jar.enabled = false


buildscript {
	ext {
		springBootVersion = '2.2.5.RELEASE'
		set('springCloudVersion', "Hoxton.SR3")
		set('log4j2.version', '2.17.1')
	}

	repositories {
		mavenCentral()
		maven { url "https://plugins.gradle.org/m2/" }
		maven { url "https://repo.gsitm.com/repository/m2-public/" }
	}

	dependencies {
		classpath("org.springframework.boot:spring-boot-gradle-plugin:${springBootVersion}")
		classpath('io.spring.gradle:dependency-management-plugin:1.0.9.RELEASE')
		classpath("io.franzbecker:gradle-lombok:1.8")
	}
}

// configuration setting version
configurations.all {
	resolutionStrategy.eachDependency { DependencyResolveDetails details ->
		if (details.requested.group == 'ch.qos.logback') {
			details.useVersion '1.2.9'
		}

		if (details.requested.group == 'org.apache.logging.log4j') {
			details.useVersion '2.17.1'
		}
	}
}

group = 'com.gsitm.ustra'
version = '0.0.1-SNAPSHOT'

sourceCompatibility = 1.8
targetCompatibility = 1.8

eclipse {
	classpath { downloadSources=true }
}


ext {
	set('springCloudVersion', "Hoxton.SR3")
	ustraVersion = '2.0.51.RELEASE'
}


dependencyManagement {
	imports {
		mavenBom "org.springframework.cloud:spring-cloud-dependencies:${springCloudVersion}"
	}
}

task initSourceFolders {
	sourceSets*.java.srcDirs*.each {
		if (!it.exists()) {
			it.mkdirs()
		}
	}

	sourceSets*.resources.srcDirs*.each {
		if (!it.exists()) {
			it.mkdirs()
		}
	}
}

repositories {
	mavenCentral()
	maven { url "https://repo.gsitm.com/repository/m2-public/" }
}



dependencies {

	implementation 'ch.qos.logback:logback-core:1.2.9'
	implementation 'ch.qos.logback:logback-classic:1.2.9'
	implementation 'org.apache.logging.log4j:log4j-to-slf4j:2.17.1'
	implementation 'org.apache.logging.log4j:log4j-api:2.17.1'

	implementation 'org.springframework.boot:spring-boot-starter'
	testImplementation 'org.springframework.boot:spring-boot-starter-test'
	testRuntimeOnly 'org.junit.platform:junit-platform-launcher'

	compileOnly 'org.projectlombok:lombok'
	implementation 'org.springframework.boot:spring-boot-starter-aop'

	annotationProcessor 'org.springframework.boot:spring-boot-configuration-processor'
	annotationProcessor 'org.projectlombok:lombok'

	testAnnotationProcessor 'org.projectlombok:lombok'
	testCompileOnly 'org.projectlombok:lombok'

	implementation "com.gsitm.ustra.java.starter:ustra-starter-vue-bo:${ustraVersion}"
	implementation "com.gsitm.ustra.java:ustra-data-redis:${ustraVersion}"
	implementation 'io.springfox:springfox-swagger2:2.9.2'
	implementation 'io.springfox:springfox-swagger-ui:2.9.2'

	compileOnly 'org.springframework.boot:spring-boot-devtools'
}


task shadowJar {

	dependsOn 'jar'
	doLast {
		delete fileTree(dir: "build", exclude: "libs")
		delete fileTree(dir: "build/libs", exclude: "*.jar")
	}
}


//plugins {
//	id 'org.springframework.boot' version '2.6.7'
//	id 'io.spring.dependency-management' version '1.0.11.RELEASE'
//	id 'java'
//}
//
//group = 'com.gsitm.ustra'
//version = '0.0.1-SNAPSHOT'
//sourceCompatibility = '1.8'
//
//configurations {
//	compileOnly {
//		extendsFrom annotationProcessor
//	}
//}
//
//repositories {
//	mavenCentral()
//}
//
//dependencies {
//	implementation 'org.springframework.boot:spring-boot-starter'
//	compileOnly 'org.projectlombok:lombok'
//	annotationProcessor 'org.projectlombok:lombok'
//	testImplementation 'org.springframework.boot:spring-boot-starter-test'
//}
//
//tasks.named('test') {
//	useJUnitPlatform()
//}
